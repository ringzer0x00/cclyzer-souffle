//------------------------------------------------------------------------------
// [1 Call-site Sensitive + Heap Analysis]
//
// In this analysis, context and alocation context is in both cases
// the latest invocation instruction.
//------------------------------------------------------------------------------

.type ContextItem = symbol | Instruction
.type Context = [ci: ContextItem]
.type AllocationContext = [ci :ContextItem]

.decl context(?ctx:Context)
.decl alloc_context(?allocCtx:AllocationContext)
.decl context_item(?item:ContextItem)

//-----------------------------------------------------
// Context Constructors
//-----------------------------------------------------

.decl context_request(?callerCtx: Context, ?aCtx: AllocationContext, ?invoc: Instruction, ?tofunction: FunctionDecl)
.decl context_response(?callerCtx: Context, ?aCtx: AllocationContext, ?invoc: Instruction, ?ctx: Context)

context(?ctx),
context_item(?invoc),
context_response(?callerCtx, ?aCtx, ?invoc, ?ctx) :-
  context_request(?callerCtx, ?aCtx, ?invoc, _),
  ?ctx = [?invoc].

.decl acontext_request(?ctx: Context, ?alloc: Allocation, ?var: Variable)
.decl acontext_response(?ctx: Context, ?alloc: Allocation, ?var: Variable, ?aCtx: AllocationContext)

alloc_context(?aCtx),
acontext_response(?ctx, ?alloc, ?var, ?aCtx) :-
  acontext_request(?ctx, ?alloc, ?var),
  ?ctx = [?ctxItem],
  ?aCtx = [?ctxItem].

//-----------------------------------------------------
// Context Item Constructors
//-----------------------------------------------------

.decl context_item_by_invoc(?invoc:Instruction, ?ctxItem:ContextItem)
.decl context_item_invoc(?ctxItem:ContextItem, ?invoc:Instruction)

context_item_invoc(?ctxItem, ?invoc) :-
  context_item_by_invoc(?invoc, ?ctxItem).

context_item(?ctxItem),
context_item_by_invoc(?instr, ?ctxItem) :-
   (call_instruction(?instr);
    invoke_instruction(?instr)),
   ?ctxItem = ?instr.


// Dummy context items (needed for empty contexts)
.decl matches_string_context(?str:symbol)

matches_string_context(?str):-
   ?str = "<<empty-context>>".
matches_string_context(?str):-
   ?str = "<<main-context>>".
matches_string_context(?str):-
   ?str = "<<startup-context>>".
matches_string_context(?str):-
   ?str = "<<exit-context>>".

.decl dummy_context_item_by_str(?str:symbol, ?ctxItem:ContextItem)

context_item(?ctxItem),
dummy_context_item_by_str(?str, ?ctxItem) :-
   matches_string_context(?str),
   ?ctxItem = ?str.

//-----------------------------------------------------
// Macro-constructors
//-----------------------------------------------------
// .decl record(?ctx: Context, ?alloc: Allocation, ?aCtx: AllocationContext)
// record[Ctx, Alloc] = ACtx ->
//    context(Ctx), allocation(Alloc), alloc_context(ACtx).
//
// .decl merge(?callerCtx: Context, ?invoc: Instruction, ?aCtx: AllocationContext, ?alloc: Allocation, ?calleeCtx: Context)
//
// merge[CallerCtx, Invoc, ACtx, Alloc] = CalleeCtx ->
//    context(CallerCtx), context(CalleeCtx),
//    instruction(Invoc), alloc_context(ACtx), allocation(Alloc).

/*
// Macro-definitions
alloc_context_new(?item, ?aCtx) :-
   record(?ctx, _, ?aCtx),
   context_new(?item, ?ctx).


context_new(?newItem, ?calleeCtx) :-
   merge(?callerCtx, ?invoc, _, _, ?calleeCtx),
   context_new(_,?callerCtx),
   context_item_by_invoc(?invoc, ?newItem).
*/

//-----------------------------------------------------
// Unpacking context items
//-----------------------------------------------------

.decl context_getitem(?ctx:Context, ?item:ContextItem)
context_getitem(?ctx, ?item):-
   context_response(_, _, ?item, ?ctx).

.decl context_getinvoc(?ctx:Context, ?invoc:Instruction)
context_getinvoc(?ctx, ?invoc):-
   context_getitem(?ctx, ?item),
   context_item_invoc(?item, ?invoc).
