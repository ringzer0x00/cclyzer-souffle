//------------------------------------------------------------------------------
//  [Interprocedural Logic]
//------------------------------------------------------------------------------


.decl callgraph_inverted_edge(?callerCtx: Context, ?callerInstr: Instruction, ?calleeCtx: Context, ?callee: FunctionDecl)

callgraph_inverted_edge(?callerCtx, ?callerInstr, ?calleeCtx, ?callee) :-
   callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr).

.decl reachable_context4(?calleeCtx: Context, ?callee: FunctionDecl)
.output reachable_context4

reachable_context4(?calleeCtx, ?callee),
reachable_context(?calleeCtx, ?callee) :-
   callgraph_inverted_edge(_, _, ?calleeCtx, ?callee).

.decl function_by_location(?alloc: GlobalAllocation, ?callee: FunctionDecl)
function_by_location(?alloc, ?callee) :-
   global_allocation_by_function(?callee, ?alloc).

reachable_context(?calleeCtx, ?tofunction),
callgraph_edge(?calleeCtx, ?tofunction, ?callerCtx, ?invocation) :-
  context_request(?callerCtx, ?aCtx, ?invocation, ?tofunction),
  context_response(?callerCtx, ?aCtx, ?invocation, ?calleeCtx).


// Direct function calls
context_request(?callerCtx, ?aCtx, ?callerInstr, ?callee) :-
   direct_call_instruction(?callerInstr),
   call_instruction_fn_target(?callerInstr, ?callee),
   instruction_in_function(?callerInstr, ?instrFunc),
   reachable_context(?callerCtx, ?instrFunc),
   // Extra
   context_response(_, ?aCtx, ?callerInstr, _).

context_request(?callerCtx, ?aCtx, ?callerInstr, ?callee) :-
   direct_invoke_instruction(?callerInstr),
   invoke_instruction_fn_target(?callerInstr, ?callee),
   instruction_in_function(?callerInstr, ?instrFunc),
   reachable_context(?callerCtx, ?instrFunc),
   // Extra
   context_response(_, ?aCtx, ?callerInstr, _).

// Indirect function calls (via function pointers)
context_request(?callerCtx, ?aCtx, ?callerInstr, ?callee) :-
   indirect_call_instruction(?callerInstr),
   call_instruction_fn_operand(?callerInstr, ?funcOp),
   operand_points_to(?aCtx, ?funcLoc, ?callerCtx, ?funcOp),
   function_by_location(?funcLoc, ?callee),
   function_has_type(?callee, ?actualType),
   operand_has_type(?funcOp, ?funcOpType),
   pointer_type_has_component(?funcOpType, ?declaredType),
   type_compatible(?actualType, ?declaredType).

context_request(?callerCtx, ?aCtx, ?callerInstr, ?callee) :-
   invoke_instruction(?callerInstr),
   invoke_instruction_fn_operand(?callerInstr, ?funcOp),
   operand_points_to(?aCtx, ?funcLoc, ?callerCtx, ?funcOp),
   function_by_location(?funcLoc, ?callee),
   function_has_type(?callee, ?actualType),
   operand_has_type(?funcOp, ?funcOpType),
   pointer_type_has_component(?funcOpType, ?declaredType),
   type_compatible(?actualType, ?declaredType).


//------------------------------------------------------------------------------
//  Interprocedural Assignments
//------------------------------------------------------------------------------

// Interprocedural assignment due to function call
.decl interp_assignment(?toCtx: Context, ?toVar: Variable, ?fromCtx: Context, ?fromValue: Operand)

var_points_to(?aCtx, ?alloc, ?toCtx, ?toVar) :-
   interp_assignment(?toCtx, ?toVar, ?fromCtx, ?fromValue),
   operand_points_to(?aCtx, ?alloc, ?fromCtx, ?fromValue).

// Actual argument of function call

.decl actual_arg(?instr: Instruction, ?index: number, ?argument: Operand)

actual_arg(?invokeInstr, ?index, ?argument) :-
   invoke_instruction_arg(?invokeInstr, ?index, ?argument).

actual_arg(?callInstr, ?index, ?argument) :-
   call_instruction_arg(?callInstr, ?index, ?argument).

// Actual argument to formal parameter `assignment`
interp_assignment(?calleeCtx, ?param, ?callerCtx, ?argument) :-
   callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr),
   callgraph_inverted_edge(?callerCtx, ?callerInstr, ?calleeCtx, ?callee),   //redundant OPT clause?
   actual_arg(?callerInstr, ?index, ?argument),
   function_param(?callee, ?index, ?param),
   // Attribute is not passed by value
   !function_param_by_value(?callee, ?index).

// Returned value to target variable `assignment`

.decl function_returns_value(?retValue: Operand, ?inFunction: Function)

function_returns_value(?retValue, ?inFunction) :-
   ret_instruction_value(?retInsn, ?retValue),
   instruction_in_function(?retInsn, ?inFunction).

interp_assignment(?callerCtx, ?toVar, ?calleeCtx, ?retValue) :-
   (call_instruction(?callerInstr);
   invoke_instruction(?callerInstr)),
   //callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr),
   callgraph_inverted_edge(?callerCtx, ?callerInstr, ?calleeCtx, ?callee),   //redundant OPT clause?
   function_returns_value(?retValue, ?callee),
   instruction_assigns_to(?callerInstr, ?toVar).


//------------------------------------------------------------------------------
//  Variadic Functions
//------------------------------------------------------------------------------

// `va_arg` instruction
//
// TODO: model target-specific value `va_list` and calls to related
// LLVM intrinsic functions. Right now this may produce nothing

.decl va_arg_target(?toVar: Variable, ?argType: Type, ?callee: Function)

va_arg_target(?toVar, ?argType, ?callee) :-
   va_arg_instruction(?vAArgInstr),
   va_arg_instruction_type(?vAArgInstr, ?argType),
   instruction_assigns_to(?vAArgInstr, ?toVar),
   instruction_in_function(?vAArgInstr, ?callee).

interp_assignment(?calleeCtx, ?toVar, ?callerCtx, ?argument) :-
   va_arg_target(?toVar, ?argType, ?callee),
   function_has_type(?callee, ?type),
   function_type_has_varargs(?type),
   function_type_nparams(?type, ?n),
   callgraph_inverted_edge(?callerCtx, ?callerInstr, ?calleeCtx, ?callee),
   actual_arg(?callerInstr, ?index, ?argument),
   ?index >= ?n,
   operand_has_type(?argument, ?argType).

//------------------------------------------------------------------------------
//  Pass-by-value Semantics
//------------------------------------------------------------------------------

// Interprocedural memcpy due to function call

.decl memcpy_pass_by_value(?instr: Instruction, ?toCtx: Context, ?toVar: Variable, ?fromCtx: Context, ?fromValue: Operand)


// Model as memcpy instruction
memcpy_pass_by_value(?callerInstr, ?calleeCtx, ?param, ?callerCtx, ?argument)
 :-
   callgraph_edge(?calleeCtx, ?callee, ?callerCtx, ?callerInstr),
   callgraph_inverted_edge(?callerCtx, ?callerInstr, ?calleeCtx, ?callee),
   actual_arg(?callerInstr, ?index, ?argument),
   function_param(?callee, ?index, ?param),
   // Attribute is passed by value
   function_param_by_value(?callee, ?index).

//------------------------------------------------------------------------------
//  Functions called at exit
//------------------------------------------------------------------------------

// The following rule augments the logic about identifying functions
// registered to run at program exit, so that it also works with
// function pointers.

.decl registers_atexit(?callerCtx: Context, ?funcOp: Operand)

registers_atexit(?callerCtx, ?funcOp) :-
   function_has_name(?atExit, "@atexit"),
   callgraph_inverted_edge(?callerCtx, ?callerInstr, _, ?atExit),
   actual_arg(?callerInstr, 0, ?funcOp).

called_at_exit(?callback) :-
   registers_atexit(?ctx, ?funcOp),
   operand_points_to(_, ?alloc, ?ctx, ?funcOp),
   function_by_location(?alloc, ?callback).
